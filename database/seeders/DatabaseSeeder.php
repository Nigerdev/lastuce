<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use App\Models\Episode;
use App\Models\AstucesSoumise;
use App\Models\Partenariat;
use App\Models\NewsletterAbonne;
use App\Models\BlogArticle;

class DatabaseSeeder extends Seeder
{
    /**
     * Seed the application's database.
     */
    public function run(): void
    {
        $this->command->info('üöÄ D√©but du seeding de la base de donn√©es L\'Astuce...');

        // Cr√©er les √©pisodes
        $this->seedEpisodes();
        
        // Cr√©er les astuces soumises
        $this->seedAstucesSoumises();
        
        // Cr√©er les demandes de partenariat
        $this->seedPartenariats();
        
        // Cr√©er les abonn√©s newsletter
        $this->seedNewsletterAbonnes();
        
        // Cr√©er les articles de blog
        $this->seedBlogArticles();

        $this->command->info('‚úÖ Seeding termin√© avec succ√®s !');
        $this->displayStatistics();
    }

    /**
     * Seed episodes with different types and statuses.
     */
    private function seedEpisodes(): void
    {
        $this->command->info('üì∫ Cr√©ation des √©pisodes...');

        // √âpisodes publi√©s r√©cents (15)
        Episode::factory(15)
            ->published()
            ->episode()
            ->recent()
            ->create();

        // √âpisodes coulisses publi√©s (8)
        Episode::factory(8)
            ->published()
            ->coulisse()
            ->create();

        // √âpisodes bonus publi√©s (5)
        Episode::factory(5)
            ->published()
            ->bonus()
            ->create();

        // √âpisodes programm√©s (3)
        Episode::factory(3)
            ->scheduled()
            ->episode()
            ->create();

        // Brouillons (4)
        Episode::factory(4)
            ->draft()
            ->create();

        // Quelques √©pisodes sans YouTube (2)
        Episode::factory(2)
            ->published()
            ->withoutYoutube()
            ->create();

        $this->command->info('   ‚úì ' . Episode::count() . ' √©pisodes cr√©√©s');
    }

    /**
     * Seed astuces soumises with various statuses.
     */
    private function seedAstucesSoumises(): void
    {
        $this->command->info('üí° Cr√©ation des astuces soumises...');

        // Astuces en attente (12)
        AstucesSoumise::factory(12)
            ->enAttente()
            ->create();

        // Astuces approuv√©es (8)
        AstucesSoumise::factory(8)
            ->approuve()
            ->withAdminComments()
            ->create();

        // Astuces rejet√©es (4)
        AstucesSoumise::factory(4)
            ->rejete()
            ->withAdminComments()
            ->create();

        // Astuces r√©centes avec fichiers joints (6)
        AstucesSoumise::factory(6)
            ->recent()
            ->withAttachment()
            ->create();

        // Astuces sans fichiers joints (5)
        AstucesSoumise::factory(5)
            ->withoutAttachment()
            ->create();

        $this->command->info('   ‚úì ' . AstucesSoumise::count() . ' astuces soumises cr√©√©es');
    }

    /**
     * Seed partenariats with different statuses.
     */
    private function seedPartenariats(): void
    {
        $this->command->info('ü§ù Cr√©ation des demandes de partenariat...');

        // Nouvelles demandes (5)
        Partenariat::factory(5)
            ->nouveau()
            ->recent()
            ->create();

        // Demandes en cours (3)
        Partenariat::factory(3)
            ->enCours()
            ->withDetailedNotes()
            ->create();

        // Partenariats accept√©s (4)
        Partenariat::factory(4)
            ->accepte()
            ->withDetailedNotes()
            ->create();

        // Partenariats refus√©s (2)
        Partenariat::factory(2)
            ->refuse()
            ->withDetailedNotes()
            ->create();

        $this->command->info('   ‚úì ' . Partenariat::count() . ' demandes de partenariat cr√©√©es');
    }

    /**
     * Seed newsletter subscribers with realistic distribution.
     */
    private function seedNewsletterAbonnes(): void
    {
        $this->command->info('üìß Cr√©ation des abonn√©s newsletter...');

        // Abonn√©s actifs de cette semaine (15)
        NewsletterAbonne::factory(15)
            ->cetteSemaine()
            ->create();

        // Abonn√©s actifs de ce mois (25)
        NewsletterAbonne::factory(25)
            ->ceMois()
            ->create();

        // Abonn√©s r√©cents (30)
        NewsletterAbonne::factory(30)
            ->recent()
            ->create();

        // Abonn√©s anciens actifs (80)
        NewsletterAbonne::factory(80)
            ->ancien()
            ->actif()
            ->create();

        // Abonn√©s inactifs (15)
        NewsletterAbonne::factory(15)
            ->inactif()
            ->create();

        // Abonn√©s d√©sabonn√©s (10)
        NewsletterAbonne::factory(10)
            ->desabonne()
            ->create();

        $this->command->info('   ‚úì ' . NewsletterAbonne::count() . ' abonn√©s newsletter cr√©√©s');
    }

    /**
     * Seed blog articles with different statuses and dates.
     */
    private function seedBlogArticles(): void
    {
        $this->command->info('üìù Cr√©ation des articles de blog...');

        // Articles publi√©s r√©cents (10)
        BlogArticle::factory(10)
            ->published()
            ->recent()
            ->withImage()
            ->create();

        // Articles de coulisses (5)
        BlogArticle::factory(5)
            ->published()
            ->coulisses()
            ->withImage()
            ->create();

        // Articles programm√©s (3)
        BlogArticle::factory(3)
            ->scheduled()
            ->withImage()
            ->create();

        // Brouillons (4)
        BlogArticle::factory(4)
            ->draft()
            ->create();

        // Articles populaires (anciens mais bons) (6)
        BlogArticle::factory(6)
            ->popular()
            ->withImage()
            ->longContent()
            ->create();

        // Articles sans images (3)
        BlogArticle::factory(3)
            ->published()
            ->withoutImage()
            ->shortContent()
            ->create();

        // Articles distribu√©s sur plusieurs mois pour les archives
        for ($month = 1; $month <= 6; $month++) {
            BlogArticle::factory(2)
                ->fromMonth(2024, $month)
                ->withImage()
                ->create();
        }

        $this->command->info('   ‚úì ' . BlogArticle::count() . ' articles de blog cr√©√©s');
    }

    /**
     * Display statistics after seeding.
     */
    private function displayStatistics(): void
    {
        $this->command->info('üìä Statistiques de la base de donn√©es :');
        $this->command->line('');
        
        // Episodes
        $episodeStats = [
            'Total' => Episode::count(),
            'Publi√©s' => Episode::published()->count(),
            'Brouillons' => Episode::where('is_published', false)->count(),
            'Programm√©s' => Episode::scheduled()->count(),
        ];
        
        $this->command->info('üì∫ √âpisodes :');
        foreach ($episodeStats as $label => $count) {
            $this->command->line("   {$label}: {$count}");
        }
        
        // Astuces soumises
        $astuceStats = AstucesSoumise::countByStatus();
        $this->command->info('üí° Astuces soumises :');
        $this->command->line("   En attente: {$astuceStats['en_attente']}");
        $this->command->line("   Approuv√©es: {$astuceStats['approuve']}");
        $this->command->line("   Rejet√©es: {$astuceStats['rejete']}");
        
        // Partenariats
        $partenaritStats = Partenariat::countByStatus();
        $this->command->info('ü§ù Partenariats :');
        $this->command->line("   Nouveaux: {$partenaritStats['nouveau']}");
        $this->command->line("   En cours: {$partenaritStats['en_cours']}");
        $this->command->line("   Accept√©s: {$partenaritStats['accepte']}");
        $this->command->line("   Refus√©s: {$partenaritStats['refuse']}");
        
        // Newsletter
        $newsletterStats = NewsletterAbonne::countByStatus();
        $this->command->info('üìß Newsletter :');
        $this->command->line("   Actifs: {$newsletterStats['actif']}");
        $this->command->line("   Inactifs: {$newsletterStats['inactif']}");
        $this->command->line("   D√©sabonn√©s: {$newsletterStats['desabonne']}");
        
        // Blog
        $blogStats = [
            'Total' => BlogArticle::count(),
            'Publi√©s' => BlogArticle::published()->count(),
            'Brouillons' => BlogArticle::draft()->count(),
            'Programm√©s' => BlogArticle::scheduled()->count(),
        ];
        
        $this->command->info('üìù Blog :');
        foreach ($blogStats as $label => $count) {
            $this->command->line("   {$label}: {$count}");
        }
        
        $this->command->line('');
        $this->command->info('üéâ La base de donn√©es L\'Astuce est maintenant peupl√©e avec des donn√©es de test !');
        $this->command->info('üí° Utilisez ces commandes pour explorer :');
        $this->command->line('   php artisan tinker');
        $this->command->line('   Episode::published()->recent()->get()');
        $this->command->line('   AstucesSoumise::enAttente()->get()');
        $this->command->line('   NewsletterAbonne::actif()->count()');
    }
}
